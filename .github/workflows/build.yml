name: Build & Deploy

on:
  push:
    branches: [ main ]
    paths:
      - 'Docker/**'
      - 'terraform/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Set image tag
        id: vars
        run: echo "IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-12)" >> $GITHUB_OUTPUT

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
            | docker login --username AWS --password-stdin \
              ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/gatus-project:${{ steps.vars.outputs.IMAGE_TAG }} \
                       -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/gatus-project:latest \
                       -f ./Docker/Dockerfile ./Docker

      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}-v1

      - name: Install Trivy
        run: |
          TRIVY_VERSION=$(curl -s https://api.github.com/repos/aquasecurity/trivy/releases/latest | grep tag_name | cut -d '"' -f 4)
          wget https://github.com/aquasecurity/trivy/releases/download/${TRIVY_VERSION}/trivy_${TRIVY_VERSION#v}_Linux-64bit.tar.gz
          tar zxvf trivy_${TRIVY_VERSION#v}_Linux-64bit.tar.gz
          sudo mv trivy /usr/local/bin/

      - name: Run Trivy security scan
        run: |
          trivy image --exit-code 0 --no-progress --severity HIGH,CRITICAL \
             ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/gatus-project:${{ steps.vars.outputs.IMAGE_TAG }}

      - name: Push Docker images
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/gatus-project:${{ steps.vars.outputs.IMAGE_TAG }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/gatus-project:latest

      - name: Terraform init
        working-directory: ./terraform
        run: terraform init

      - name: Resolve deployment image
        id: image
        run: |
          ACCOUNT="${{ secrets.AWS_ACCOUNT_ID }}"
          REGION="${{ secrets.AWS_REGION }}"
          REPO="gatus-project"
          IMAGE_URI="$ACCOUNT.dkr.ecr.$REGION.amazonaws.com/$REPO:${{ steps.vars.outputs.IMAGE_TAG }}"
          echo "Deploying newly built image: ${{ steps.vars.outputs.IMAGE_TAG }}"
          echo "IMAGE_URI=$IMAGE_URI" >> "$GITHUB_OUTPUT"

      - name: Force unlock stale Terraform lock
        working-directory: ./terraform
        run: terraform force-unlock -force b6e069c3-8e9e-e934-d791-f2b05d4c2377 || true

      - name: Terraform plan
        working-directory: ./terraform
        env:
          TF_VAR_vpc_id: ${{ secrets.TF_VAR_VPC_ID }}
          TF_VAR_subnets_id_list: ${{ secrets.TF_VAR_SUBNETS_ID_LIST }}
          TF_VAR_image_url: ${{ steps.image.outputs.IMAGE_URI }}
        run: terraform plan -lock-timeout=60s -out=tfplan

      - name: Terraform apply
        working-directory: ./terraform
        env:
          TF_VAR_vpc_id: ${{ secrets.TF_VAR_VPC_ID }}
          TF_VAR_subnets_id_list: ${{ secrets.TF_VAR_SUBNETS_ID_LIST }}
          TF_VAR_image_url: ${{ steps.image.outputs.IMAGE_URI }}
        run: terraform apply -lock-timeout=60s tfplan

      - name: Wait for ECS service stability
        run: |
          echo "Waiting for ECS service to stabilize..."
          aws ecs wait services-stable --cluster gatus-cluster --services gatus-service

      - name: Deployment summary
        run: |
          SERVICE_STATUS=$(aws ecs describe-services \
            --cluster gatus-cluster \
            --services gatus-service \
            --query 'services[0].status' \
            --output text)

          RUNNING_COUNT=$(aws ecs describe-services \
            --cluster gatus-cluster \
            --services gatus-service \
            --query 'services[0].runningCount' \
            --output text)

          echo "Deployment Summary:"
          echo "Service Status: $SERVICE_STATUS"
          echo "Running Tasks: $RUNNING_COUNT"
          echo "Deployed Image: ${{ steps.image.outputs.IMAGE_URI }}"
          echo "Commit: ${{ github.sha }}"
